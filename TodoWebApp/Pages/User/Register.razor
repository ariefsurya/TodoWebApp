@page "/register"
@using System.ComponentModel.DataAnnotations
@using TodoWebApp.Repository.UserRepository
@inject IUserRepository _userRepo
@inject SweetAlertService Swal
@inject NavigationManager Navigation

<div class="d-flex p-5">
    <div class="w-50 fs-2 pe-5">
        <div class="pb-4">My Todo Website</div>
        <div>Welcome!</div>
        <p>
            Organize your task with Todo Web App.
            Simple and Practice
        </p>
    </div>

    <div class="w-50">
        <h3 class="pb-4">Register</h3>
        <EditForm Model="oUser" OnValidSubmit="HandleRegister" class="fs-5 pb-2">
            <DataAnnotationsValidator />
            @* <ValidationSummary /> *@
            <div class="pb-2">
                <label>Username</label>
                <div>
                    <InputText @bind-Value="oUser.Username" />
                    @if (!string.IsNullOrEmpty(UsernameErrorMessage))
                    {
                        <div class="text-danger fs-6">@UsernameErrorMessage</div>
                    }
                </div>
            </div>
            <div class="pb-2">
                <label>Password</label>
                <div>
                    <InputText @bind-Value="oUser.Password" />
                    @if (!string.IsNullOrEmpty(PasswordErrorMessage))
                    {
                        <div class="text-danger fs-6">@PasswordErrorMessage</div>
                    }
                </div>
            </div>

            <button type="submit" class="btn btn-success">Submit</button>
        </EditForm>
        <a href="login">&lt; back to login</a>
    </div>
</div>

@code {
    User oUser = new User();
    string UsernameErrorMessage = "";
    string PasswordErrorMessage = "";

    protected async Task HandleRegister()
    {
        UsernameErrorMessage = "";
        PasswordErrorMessage = "";
        bool isValid = await HandleValidation();

        if (isValid)
        {
            var response = await _userRepo.Register(oUser);
            if (response.Code != 200)
            {
                UsernameErrorMessage = response.Data.ToString();
                return;
            }

            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Register Success",
                    Text = "You are successfully registered",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = false,
                    ConfirmButtonText = "Ok",
                }
            );
            if (!string.IsNullOrEmpty(result.Value) || string.IsNullOrEmpty(result.Value))
            {
                Navigation.NavigateTo("/login");
            }
        }
    }

    private async Task<bool> HandleValidation()
    {
        if (string.IsNullOrEmpty(oUser.Username)) {
            UsernameErrorMessage = "Username cannot be empty";
            return false;
        }
        else if (string.IsNullOrEmpty(oUser.Password)) {
            PasswordErrorMessage = "Password cannot be empty";
            return false;
        }

        return true;
    }
}
